use io;

type WaterImporter {
  static rootUrl: String = "https://heichwaasser.lu/api/v1";

  static riversEndpoint: String = "/rivers";
  static stationsEndpoint: String = "/stations";

  static fn getRivers(): Array<Map<String, any>> {
    var url = WaterImporter::rootUrl + WaterImporter::riversEndpoint;
    var data = Http::get(url, []);
    return data as Array<Map<String, any>>;
  }

  static fn getStations(): Array<Map<String, any>> {
    var url = WaterImporter::rootUrl + WaterImporter::stationsEndpoint;

    try {
      var data = Http::get(url, []);
      return data as Array<Map<String, any>>;
    } catch (err) {
      info("Error fetching stations");
      info(err);
    }
  }

  static fn getStationWaterLevels(stationId: int, from: time, to: time): Array<Map<String, any>> {
    var url = "${WaterImporter::rootUrl}/stations/${stationId}/start/${from.to(DurationUnit::seconds)}/end/${to.to(DurationUnit::seconds)}";

    var data = Http::get(url, []);
    return data.get("measurements") as Array<Map<String, any>>;
  }
}
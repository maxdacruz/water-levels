
use station_index;

type GeoJsonData {
  type: String;
  features: Array<GeoJsonFeature>;
}

type GeoJsonFeature {
  type: String;
  geometry: GeoJsonGeometry;
  properties: any?;
}

type GeoJsonGeometry {
  type: String;
  coordinates: Array<float>;
}


type GeoJsonStationProperties {
  id: int;
  name: String;
  alert: Array<float>;
  river: String;
  currentLevel: float?;
  alertLevel: StationAlertLevel?;
}


enum StationAlertLevel {
  normal;
  warning;
  alert;
}


@expose
fn getStationsGeoJson(): GeoJsonData {
  var features: Array<GeoJsonFeature> = [];

  var data = GeoJsonData {
    type: "FeatureCollection",
    features: features
  };

  for (id, station in stations_by_id?) {
    var feat = GeoJsonFeature {
      type: "Feature",
      geometry: GeoJsonGeometry {
        type: "Point",
        coordinates: [station->coordinates.lng(), station->coordinates.lat()]
      },
      properties: GeoJsonStationProperties {
        id: id,
        name: station->city,
        alert: station->alertLevels,
        river: station->river->name,
        currentLevel: station->waterLevels.last(),
        alertLevel: station->getAlertLevel()
      }
    };

    features.add(feat);
  }

  return data;
}

@expose
fn getStationDataById(id: int, from: time?, to: time?): Table {
  var station = stations_by_id?.get(id);

  if (station == null) {
    throw "Station not found";
  }

  var sampledData = nodeTime::sample([station->waterLevels], from, to, 200, SamplingMode::adaptative, null, null);

  return sampledData;
}